# -*- coding: utf-8 -*-
"""heart_disease_prototype

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/198WTi_iWAclzjAhkXMgB3adBKUc3dmGC

(This is a beta)

Weclome to the Health disease checker! Where you can see all the data of your patients 
easily and take action as quickly as possible!

All you have to do is click "Runtime" on the top and click "Run all". Once you have done that, look at block number 2 or line numeber 52 where it asks you to choose a csv file with your data in it. Once you have done that, scroll down to see all the ways your data has been outputted. At the very bottom as well, there is a number that reflects model accuracy to keep you doctors satisfied and to tell you guys our program does not lie!

Do ignore the code but, do read the hashtags so it's easier to navigate throughout the code and know what you guys are seeing although it's easy, it's there just in case you guys get lost.
"""

import numpy as np
import pandas as pd
import seaborn as sns

#Load the data
from google.colab import files
uploaded = files.upload()

#Store the data into a variable
df = pd.read_csv('cardio_train.csv',sep =';')

#Print the first 7 rows of the  data       (age is in days)   (In cardio, 1 = Diagnosed, 2 = Safe)
df.head(7)

#Count all the empty values in the data (If there is any).
df.isna().sum()

#View some basic statistics.         (age is in days)                     (In cardio, 1 = Diagnosed, 2 = Safe)
df.describe()

#Get a count of the number of patients with cardiovascular disease.      1 =  individuals diagnosed.     2 = individuals who are safe 
df['cardio'].value_counts()

#Visualize the data in bar graph.

sns.countplot(df['cardio'])

#Look at the number of people with a cardiovascular disease that exceed the number of people without a cardiovascular disease
df['years'] = (df['age'] / 365).round(0)
df['years'] = pd.to_numeric( df['years'], downcast='integer')

sns.countplot(x='years', hue='cardio', data=df, palette='colorblind', edgecolor=sns.color_palette('dark', n_colors=1))

#How each symptom relates to one another. Negative means negative relation and positive obviously means, it's healthy.
df.corr()

#Visualize the correlated data in a health chart. How symptons react with other symptoms that can create various dangerous diseases.
import matplotlib.pyplot as plt
plt.figure(figsize= (7,7))
sns.heatmap(df.corr(), annot=True, fmt='.0%')

# Prepare it for our machine learning sequence
df = df.drop('years', axis=1)

df = df.drop('id', axis=1)

#Split the data into featured data and target data
X = df.iloc[:, :-1].values
Y = df.iloc[:, -1].values

#Split the data again, into 75% trainingt and 25% testing
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y,test_size=0.25, random_state=1)

#Feature Scaling
#Scale the values in the data to be values between 0 and 1 inclusive 
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#Use RandomForest Classifier (A MachineLearning Model)
from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators= 10, criterion='entropy', random_state =1)
forest.fit(X_test, Y_test)

#How accurate the data is for you doctors!!   (Percentage is in Decimal)
model = forest
model.score(X_train, Y_train)